// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chart_enums.proto

#ifndef PROTOBUF_INCLUDED_chart_5fenums_2eproto
#define PROTOBUF_INCLUDED_chart_5fenums_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_chart_5fenums_2eproto 

namespace protobuf_chart_5fenums_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_chart_5fenums_2eproto
namespace webrtc {
namespace analytics {
class ChartStyle;
class ChartStyleDefaultTypeInternal;
extern ChartStyleDefaultTypeInternal _ChartStyle_default_instance_;
}  // namespace analytics
}  // namespace webrtc
namespace google {
namespace protobuf {
template<> ::webrtc::analytics::ChartStyle* Arena::CreateMaybeMessage<::webrtc::analytics::ChartStyle>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace webrtc {
namespace analytics {

enum ChartStyle_Type {
  ChartStyle_Type_UNDEFINED = 0,
  ChartStyle_Type_LINE_CHART = 1,
  ChartStyle_Type_BAR_CHART = 2,
  ChartStyle_Type_LINE_STEP_CHART = 3,
  ChartStyle_Type_SCATTER_CHART = 4,
  ChartStyle_Type_ChartStyle_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ChartStyle_Type_ChartStyle_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ChartStyle_Type_IsValid(int value);
const ChartStyle_Type ChartStyle_Type_Type_MIN = ChartStyle_Type_UNDEFINED;
const ChartStyle_Type ChartStyle_Type_Type_MAX = ChartStyle_Type_SCATTER_CHART;
const int ChartStyle_Type_Type_ARRAYSIZE = ChartStyle_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChartStyle_Type_descriptor();
inline const ::std::string& ChartStyle_Type_Name(ChartStyle_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChartStyle_Type_descriptor(), value);
}
inline bool ChartStyle_Type_Parse(
    const ::std::string& name, ChartStyle_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChartStyle_Type>(
    ChartStyle_Type_descriptor(), name, value);
}
// ===================================================================

class ChartStyle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:webrtc.analytics.ChartStyle) */ {
 public:
  ChartStyle();
  virtual ~ChartStyle();

  ChartStyle(const ChartStyle& from);

  inline ChartStyle& operator=(const ChartStyle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChartStyle(ChartStyle&& from) noexcept
    : ChartStyle() {
    *this = ::std::move(from);
  }

  inline ChartStyle& operator=(ChartStyle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChartStyle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChartStyle* internal_default_instance() {
    return reinterpret_cast<const ChartStyle*>(
               &_ChartStyle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  GOOGLE_ATTRIBUTE_NOINLINE void Swap(ChartStyle* other);
  friend void swap(ChartStyle& a, ChartStyle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChartStyle* New() const final {
    return CreateMaybeMessage<ChartStyle>(NULL);
  }

  ChartStyle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChartStyle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChartStyle& from);
  void MergeFrom(const ChartStyle& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartStyle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ChartStyle_Type Type;
  static const Type UNDEFINED =
    ChartStyle_Type_UNDEFINED;
  static const Type LINE_CHART =
    ChartStyle_Type_LINE_CHART;
  static const Type BAR_CHART =
    ChartStyle_Type_BAR_CHART;
  static const Type LINE_STEP_CHART =
    ChartStyle_Type_LINE_STEP_CHART;
  static const Type SCATTER_CHART =
    ChartStyle_Type_SCATTER_CHART;
  static inline bool Type_IsValid(int value) {
    return ChartStyle_Type_IsValid(value);
  }
  static const Type Type_MIN =
    ChartStyle_Type_Type_MIN;
  static const Type Type_MAX =
    ChartStyle_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    ChartStyle_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return ChartStyle_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return ChartStyle_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return ChartStyle_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:webrtc.analytics.ChartStyle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_chart_5fenums_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChartStyle

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace analytics
}  // namespace webrtc

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::webrtc::analytics::ChartStyle_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::webrtc::analytics::ChartStyle_Type>() {
  return ::webrtc::analytics::ChartStyle_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_chart_5fenums_2eproto
